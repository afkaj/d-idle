name: Deploy

permissions:
  id-token: write
  deployments: write
  contents: write

on:
  workflow_run:
    workflows: ["Build and Push"]
    types:
      - completed

  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER: hyeyoung-eks-cluster
  ARGOCD_SERVER: aaa03ced1a2b24df19c885b53fb7115b-917213169.us-east-1.elb.amazonaws.com
  ARGOCD_USERNAME: admin
  ARGOCD_PASSWORD: OW2mdRJtQwZlby0N

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact (image_tag.txt)
        uses: actions/download-artifact@v4
        with:
          name: image-tag
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/cicd-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Update kubeconfig
        run: |
          aws eks get-token --cluster-name ${{ env.EKS_CLUSTER }} > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Login to ArgoCD
        run: |
          argocd login ${{ env.ARGOCD_SERVER }} --username ${{ env.ARGOCD_USERNAME }} --password ${{ env.ARGOCD_PASSWORD }} --insecure

      - name: Deploy to ArgoCD
        run: |
          echo "IMAGE_TAG=$(cat image_tag.txt)" >> $GITHUB_ENV
          echo "ðŸ“Œ Debug: IMAGE_TAG ê°’ -> $IMAGE_TAG"
          argocd app set didle-app --helm-set image.tag=$IMAGE_TAG --server ${{ env.ARGOCD_SERVER }}
          argocd app sync didle-app --prune --server ${{ env.ARGOCD_SERVER }}