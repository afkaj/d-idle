name: Build and Deploy

permissions:
  deployments: write
  contents: write
  statuses: write
  actions: write
  checks: read

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'didle/didle/**'  # Dockerfile이 있는 경로 감지

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: hyeyoung-ecr-repo  # Terraform에서 정의한 ECR 이름과 일치
  EKS_CLUSTER: hyeyoung-eks-cluster
  K8S_NAMESPACE: default
  APP_NAME: didle-app  # 실제 애플리케이션 이름으로 변경 필요

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      packages: write
      actions: read

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 동적 이미지 태그 생성
      - name: Generate image tag
        id: tag
        run: |
          echo "TAG=$(date +%Y%m%d%H%M%S)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # 3. AWS 권한 설정 (OIDC 인증)
      - name: Configure AWS Credentials
        id: aws-auth
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: GitHubActions-${{ github.run_id }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/cicd-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      # ✅ AWS 환경 변수 명시적으로 설정 (ECR 및 Docker Push 단계에서 필요)
      - name: Export AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ steps.aws-auth.outputs.aws-access-key-id }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ steps.aws-auth.outputs.aws-secret-access-key }}" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=${{ steps.aws-auth.outputs.aws-session-token }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV

      # 4. ECR 로그인
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          cd didle/didle
          docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.APP_NAME }}:${{ steps.tag.outputs.TAG }} .
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.APP_NAME }}:${{ steps.tag.outputs.TAG }}

      # 6. Kustomize 설치
      - name: Install Kustomize
        run: |
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash
          sudo mv kustomize /usr/local/bin/

      # 7. deployment.yaml 파일 업데이트
      - name: Update deployment.yaml
        run: |
          cd didle/didle/k8s/manifests
          sed -i "s|image: .*|image: ${{ steps.ecr-login.outputs.registry }}/${{ env.APP_NAME }}:${{ steps.tag.outputs.TAG }}|" deployment.yaml

      # 8. 변경 사항 GitHub에 커밋 및 푸시
      - name: Commit and Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add didle/didle/k8s/manifests/deployment.yaml
          git commit -m "Update deployment.yaml with new image tag" || echo "No changes to commit"
          git push origin HEAD:main
