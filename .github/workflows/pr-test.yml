name: PR 자동 테스트

on:
  pull_request:
    branches:
      - main  # main 브랜치로 PR이 생성될 때 실행

jobs:
  test:
    runs-on: self-hosted  # Rocky Linux 9에서 실행
    steps:
      - name: 코드 가져오기 (PR 브랜치)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}  # PR 브랜치 체크아웃

      - name: 현재 디렉토리 내 파일 확인
        run: ls -l  # PR 브랜치에서 Dockerfile이 존재하는지 확인

      - name: Java 17 설치
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Eclipse Temurin (OpenJDK 17)
          java-version: '17'

      - name: gradlew 파일 위치 확인
        run: find . -name "gradlew"  # gradlew 경로 확인

      - name: Gradle 실행 권한 부여 (didle/didle 폴더)
        run: chmod +x didle/didle/gradlew

      - name: 프로젝트 빌드 (Gradle)
        run: cd didle/didle && ./gradlew build -x test  # 경로 이동 후 실행

      - name: 빌드된 JAR 파일 확인
        run: ls -l didle/didle/build/libs/*.jar  # JAR 파일 확인

      - name: JAR 파일 이름 환경 변수 설정
        run: |
          echo "JAR_FILE=$(ls didle/didle/build/libs/*.jar | head -n 1)" >> $GITHUB_ENV

  docker-build:
    runs-on: self-hosted  # Rocky Linux 9에서 실행
    needs: test  # 빌드 성공 후 실행
    steps:
      - name: 코드 가져오기 (PR 브랜치)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}  # PR 브랜치 체크아웃

      - name: 현재 디렉토리 내 파일 확인 (Dockerfile 존재 확인)
        run: ls -l  # Dockerfile이 존재하는지 확인

      - name: Docker 이미지 빌드 테스트
        run: |
          if [ -f "Dockerfile" ]; then
            docker build --build-arg JAR_FILE=${{ env.JAR_FILE }} -t my-app:test .
          else
            echo " Dockerfile이 존재하지 않습니다. PR을 확인하세요!"
            exit 1
          fi

